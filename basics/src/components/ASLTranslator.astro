<div class="translator-container">
  <div class="translator-card">
    <div class="header">
      <h1>Speech to ASL</h1>
      <p class="subtitle">Real-time American Sign Language translation</p>
    </div>
    
    <div class="input-section">
      <div class="controls">
        <button id="startRecording" class="button primary">
          <span class="icon">üé§</span>
          <span class="button-text">Start</span>
          <div class="ripple"></div>
        </button>
        <button id="stopRecording" class="button secondary" disabled>
          <span class="icon">‚èπ</span>
          <span class="button-text">Stop</span>
          <div class="ripple"></div>
        </button>
      </div>
      
      <div class="transcript-box">
        <div class="box-header">
          <h3>Transcript</h3>
          <div class="status-indicator">
            <span class="status-dot"></span>
            <span class="status-text">Ready</span>
          </div>
        </div>
        <div id="transcript" class="transcript-content">
          Your speech will appear here...
        </div>
      </div>
    </div>

    <div class="output-section">
      <div class="box-header">
        <h3>ASL Translation</h3>
        <div class="status-indicator">
          <span class="status-dot"></span>
          <span class="status-text">Waiting</span>
        </div>
      </div>
      <div class="asl-display">
        <video id="aslVideo" class="asl-video" controls>
          <source src="" type="video/mp4">
          Your browser does not support the video tag.
        </video>
        <div id="aslPlaceholder" class="placeholder-content">
          <span class="placeholder-icon">üëã</span>
          <p>ASL translation will appear here...</p>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .translator-container {
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 2rem;
    background: #fafafa;
  }

  .translator-card {
    background: white;
    border-radius: 24px;
    box-shadow: 
      0 1px 2px rgba(0, 0, 0, 0.02),
      0 2px 4px rgba(0, 0, 0, 0.02),
      0 4px 8px rgba(0, 0, 0, 0.02),
      0 8px 16px rgba(0, 0, 0, 0.02);
    padding: 3rem;
    width: 100%;
    max-width: 720px;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }

  .translator-card:hover {
    transform: translateY(-2px);
    box-shadow: 
      0 1px 2px rgba(0, 0, 0, 0.03),
      0 2px 4px rgba(0, 0, 0, 0.03),
      0 4px 8px rgba(0, 0, 0, 0.03),
      0 8px 16px rgba(0, 0, 0, 0.03);
  }

  .header {
    text-align: center;
    margin-bottom: 4rem;
  }

  h1 {
    margin: 0 0 0.75rem;
    font-size: 3rem;
    font-weight: 700;
    color: #111;
    letter-spacing: -0.03em;
    font-family: 'Inter', sans-serif;
  }

  .subtitle {
    color: #666;
    font-size: 1.125rem;
    margin: 0;
    font-family: 'Inter', sans-serif;
    font-weight: 400;
    letter-spacing: -0.01em;
  }

  h3 {
    margin: 0;
    font-size: 1.125rem;
    font-weight: 600;
    color: #111;
    font-family: 'Inter', sans-serif;
    letter-spacing: -0.01em;
  }

  .input-section, .output-section {
    margin-bottom: 3rem;
  }

  .box-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.25rem;
  }

  .status-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.875rem;
    color: #666;
    font-family: 'Inter', sans-serif;
  }

  .status-dot {
    width: 6px;
    height: 6px;
    border-radius: 50%;
    background: #ccc;
    transition: background-color 0.3s ease;
  }

  .status-dot.recording {
    background: #ff4444;
    animation: pulse 1.5s infinite;
  }

  .status-dot.processing {
    background: #ffbb33;
    animation: pulse 1.5s infinite;
  }

  .status-dot.ready {
    background: #00C851;
  }

  @keyframes pulse {
    0% { transform: scale(1); opacity: 1; }
    50% { transform: scale(1.5); opacity: 0.5; }
    100% { transform: scale(1); opacity: 1; }
  }

  .controls {
    display: flex;
    gap: 1rem;
    margin-bottom: 2.5rem;
  }

  .button {
    position: relative;
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 1rem 2rem;
    border: none;
    border-radius: 16px;
    font-size: 1rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
    overflow: hidden;
    font-family: 'Inter', sans-serif;
  }

  .button .icon {
    font-size: 1.25rem;
  }

  .button .ripple {
    position: absolute;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.3);
    transform: scale(0);
    animation: ripple 0.6s linear;
    pointer-events: none;
  }

  @keyframes ripple {
    to {
      transform: scale(4);
      opacity: 0;
    }
  }

  .button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
  }

  .primary {
    background: #111;
    color: white;
  }

  .primary:hover:not(:disabled) {
    transform: translateY(-2px);
    background: #000;
  }

  .primary:active:not(:disabled) {
    transform: translateY(0);
  }

  .secondary {
    background: #f5f5f5;
    color: #111;
  }

  .secondary:hover:not(:disabled) {
    background: #eee;
    transform: translateY(-2px);
  }

  .secondary:active:not(:disabled) {
    transform: translateY(0);
  }

  .transcript-box, .asl-display {
    background: #fafafa;
    border: 1px solid #eee;
    border-radius: 16px;
    padding: 1.75rem;
    transition: all 0.3s ease;
  }

  .transcript-box:hover, .asl-display:hover {
    border-color: #e0e0e0;
  }

  .transcript-content {
    min-height: 100px;
    color: #333;
    line-height: 1.6;
    font-size: 1.125rem;
    font-family: 'Inter', sans-serif;
  }

  .asl-video {
    width: 100%;
    max-width: 100%;
    border-radius: 12px;
    display: none;
  }

  .asl-video.visible {
    display: block;
  }

  .placeholder-content {
    text-align: center;
    padding: 2rem;
  }

  .placeholder-content.hidden {
    display: none;
  }

  .placeholder-icon {
    font-size: 2.5rem;
    margin-bottom: 1rem;
    display: block;
  }

  .placeholder-content p {
    margin: 0;
    font-size: 1rem;
    color: #666;
    font-family: 'Inter', sans-serif;
  }

  @media (max-width: 768px) {
    .translator-container {
      padding: 1rem;
    }

    .translator-card {
      padding: 2rem;
      border-radius: 20px;
    }

    h1 {
      font-size: 2.25rem;
    }

    .subtitle {
      font-size: 1rem;
    }

    .controls {
      flex-direction: column;
    }

    .button {
      width: 100%;
      justify-content: center;
      padding: 0.875rem 1.5rem;
    }

    .transcript-box, .asl-display {
      padding: 1.25rem;
    }
  }
</style>

<script>
  let mediaRecorder: MediaRecorder | null = null;
  let audioChunks: Blob[] = [];
  let isRecording = false;
  let recognition: any = null;

  // Initialize speech recognition
  if ('webkitSpeechRecognition' in window) {
    recognition = new (window as any).webkitSpeechRecognition();
    recognition.continuous = true;
    recognition.interimResults = true;
  }

  const startButton = document.getElementById('startRecording') as HTMLButtonElement;
  const stopButton = document.getElementById('stopRecording') as HTMLButtonElement;
  const transcriptElement = document.getElementById('transcript') as HTMLDivElement;
  const statusDot = document.querySelector('.status-dot') as HTMLSpanElement;
  const statusText = document.querySelector('.status-text') as HTMLSpanElement;
  const aslVideo = document.getElementById('aslVideo') as HTMLVideoElement;
  const aslPlaceholder = document.getElementById('aslPlaceholder') as HTMLDivElement;

  async function startRecording() {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      mediaRecorder = new MediaRecorder(stream);
      audioChunks = [];

      mediaRecorder.ondataavailable = (event) => {
        audioChunks.push(event.data);
      };

      mediaRecorder.start();
      isRecording = true;
      updateUI(true);

      if (recognition) {
        recognition.start();
        recognition.onresult = (event: any) => {
          const transcript = Array.from(event.results)
            .map((result: any) => result[0].transcript)
            .join('');
          transcriptElement.textContent = transcript;
        };
      }
    } catch (error) {
      console.error('Error accessing microphone:', error);
      alert('Error accessing microphone. Please ensure you have granted microphone permissions.');
    }
  }

  async function stopRecording() {
    if (mediaRecorder && isRecording) {
      mediaRecorder.stop();
      isRecording = false;
      updateUI(false);

      if (recognition) {
        recognition.stop();
      }

      // Get the final transcript
      const transcript = transcriptElement.textContent || '';
      
      // Only process if we have a transcript
      if (transcript && transcript !== 'Your speech will appear here...') {
        try {
          // Show loading state
          statusDot.classList.add('processing');
          statusText.textContent = 'Processing...';
          
          // Send transcript to API
          const response = await fetch('https://flaskapitext2video.onrender.com/translate', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ text: transcript }),
          });

          if (!response.ok) {
            throw new Error('Translation failed');
          }

          // Get video blob
          const videoBlob = await response.blob();
          const videoUrl = URL.createObjectURL(videoBlob);

          // Update video source and show video
          aslVideo.src = videoUrl;
          aslVideo.classList.add('visible');
          aslPlaceholder.classList.add('hidden');

          // Update status
          statusDot.classList.remove('processing');
          statusDot.classList.add('ready');
          statusText.textContent = 'Ready';
        } catch (error) {
          console.error('Error processing translation:', error);
          statusDot.classList.remove('processing');
          statusText.textContent = 'Error';
          alert('Error processing translation. Please try again.');
        }
      }
    }
  }

  function updateUI(recording: boolean) {
    startButton.disabled = recording;
    stopButton.disabled = !recording;
    
    if (recording) {
      statusDot.classList.add('recording');
      statusText.textContent = 'Recording...';
    } else {
      statusDot.classList.remove('recording');
      statusText.textContent = 'Ready';
    }
  }

  // Add ripple effect to buttons
  function createRipple(event: MouseEvent) {
    const button = event.currentTarget as HTMLButtonElement;
    const ripple = button.querySelector('.ripple') as HTMLDivElement;
    
    const rect = button.getBoundingClientRect();
    const size = Math.max(rect.width, rect.height);
    
    ripple.style.width = ripple.style.height = `${size}px`;
    ripple.style.left = `${event.clientX - rect.left - size / 2}px`;
    ripple.style.top = `${event.clientY - rect.top - size / 2}px`;
    
    ripple.classList.remove('active');
    ripple.classList.add('active');
  }

  startButton.addEventListener('click', startRecording);
  stopButton.addEventListener('click', stopRecording);
  startButton.addEventListener('mousedown', createRipple);
  stopButton.addEventListener('mousedown', createRipple);
</script>