<div class="translator-container">
  <div class="translator-card">
    <h1>Speech to ASL Translator</h1>
    
    <div class="input-section">
      <div class="controls">
        <button id="startRecording" class="button primary">
          <span class="icon">üé§</span>
          Start Recording
        </button>
        <button id="stopRecording" class="button secondary" disabled>
          <span class="icon">‚èπ</span>
          Stop Recording
        </button>
      </div>
      
      <div class="transcript-box">
        <h3>Transcript</h3>
        <div id="transcript" class="transcript-content">
          Your speech will appear here...
        </div>
      </div>
    </div>

    <div class="output-section">
      <h3>ASL Translation</h3>
      <div class="asl-display">
        <div id="aslAnimation" class="asl-animation">
          ASL signs will be displayed here...
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .translator-container {
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 2rem;
  }

  .translator-card {
    background: var(--lw-card-bg);
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    padding: 2rem;
    width: 100%;
    max-width: 800px;
  }

  h1 {
    margin: 0 0 2rem;
    font-size: 2rem;
    font-weight: 600;
    color: var(--lw-text);
    text-align: center;
  }

  h3 {
    margin: 0 0 1rem;
    font-size: 1.2rem;
    font-weight: 500;
    color: var(--lw-text);
  }

  .input-section, .output-section {
    margin-bottom: 2rem;
  }

  .controls {
    display: flex;
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  .button {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 6px;
    font-size: 1rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .primary {
    background: var(--lw-link);
    color: white;
  }

  .primary:hover:not(:disabled) {
    background: #1557b0;
  }

  .secondary {
    background: #f0f0f0;
    color: var(--lw-text);
  }

  .secondary:hover:not(:disabled) {
    background: #e0e0e0;
  }

  .transcript-box, .asl-display {
    background: #f8f9fa;
    border: 1px solid var(--lw-border);
    border-radius: 6px;
    padding: 1rem;
  }

  .transcript-content {
    min-height: 100px;
    color: #666;
  }

  .asl-animation {
    min-height: 200px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #666;
  }

  @media (max-width: 768px) {
    .translator-container {
      padding: 1rem;
    }

    .translator-card {
      padding: 1.5rem;
    }

    h1 {
      font-size: 1.5rem;
    }

    .controls {
      flex-direction: column;
    }

    .button {
      width: 100%;
      justify-content: center;
    }
  }
</style>

<button id="record">Record</button>
<p id="output">Transcript will show up here</p>

<script>
  const startBtn = document.getElementById("startRecording");
  const stopBtn = document.getElementById("stopRecording");
  const transcriptBox = document.getElementById("transcript");

  let mediaRecorder;
  let audioChunks = [];

  startBtn.onclick = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      mediaRecorder = new MediaRecorder(stream);
      audioChunks = [];

      mediaRecorder.ondataavailable = event => {
        audioChunks.push(event.data);
      };

      mediaRecorder.onstop = async () => {
        transcriptBox.textContent = "Transcribing...";
        const audioBlob = new Blob(audioChunks, { type: "audio/wav" });
        const formData = new FormData();
        formData.append("file", audioBlob, "audio.wav");

        try {
          const response = await fetch("https://flaskapispeech2text.onrender.com/transcribe", {
            method: "POST",
            body: formData,
          });
          if (!res.ok) {
            const errorText = await res.text();
            console.error("Backend error:", errorText);
            output.textContent = `Server error: ${res.status}`;
            return;
          }

          const data = await response.json();
          console.log(data);
          transcriptBox.textContent = data.transcription || "No speech detected.";
        } catch (err) {
          transcriptBox.textContent = "Error transcribing speech.";
          console.error("Transcription error:", err);
        }

        // Stop the stream's audio tracks
        stream.getTracks().forEach(track => track.stop());
        startBtn.disabled = false;
        stopBtn.disabled = true;
      };

      mediaRecorder.start();
      startBtn.disabled = true;
      stopBtn.disabled = false;
    } catch (err) {
      transcriptBox.textContent = "Microphone access denied.";
      console.error("Microphone error:", err);
    }
  };

  stopBtn.onclick = () => {
    if (mediaRecorder && mediaRecorder.state === "recording") {
      mediaRecorder.stop();
    }
  };
</script>